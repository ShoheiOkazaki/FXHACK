<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Wrangle on FX HACK</title>
    <link>https://ShoheiOkazaki.github.io/FXHACK/tags/wrangle/</link>
    <description>Recent content in Wrangle on FX HACK</description>
    <image>
      <url>https://ShoheiOkazaki.github.io/FXHACK/profile.jpg</url>
      <link>https://ShoheiOkazaki.github.io/FXHACK/profile.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 10 Dec 2016 10:00:44 +0900</lastBuildDate><atom:link href="https://ShoheiOkazaki.github.io/FXHACK/tags/wrangle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wrangleを使おう 3 - Replace ForLoop</title>
      <link>https://ShoheiOkazaki.github.io/FXHACK/posts/2016-12-10/</link>
      <pubDate>Sat, 10 Dec 2016 10:00:44 +0900</pubDate>
      
      <guid>https://ShoheiOkazaki.github.io/FXHACK/posts/2016-12-10/</guid>
      <description>久しぶりのWrangle回です。
個人的にHoudiniにおいて、よく使う必需ノードは、For LoopとAttribute Promoteです。これらがないと仕事ができません。もちろんWrangleも絶対使います。
特にFor LoopはHoudiniを象徴するようなノードだと勝手に思ってます。ある処理を考え、それを他のものにも同様な処理を施す。まさにProceduralに作業する上で必要不可欠なものです。
しかし！ForLoopは処理に時間がかる時が大半です。なぜなら、すべてのノードがマルチスレッド処理されるわけではありませんし、１つ１つのピースやグループを同時にではなく、順番に処理するため遅くなってしまいます 。
シンプルな例を元に解説していきます。
Sample File : wrangle_03.hiplc (15.5.607 linux-x86_64-gcc4.8)
Voronoiで割った1つ1つのピースのサイズを測ろうと思います。あまりにも小さいピースはSimulationに参加させない様にさせるとか、大きいやつはもう一回砕こうとかで使うことがありますね。
ピースのサイズを求めるために、まずMeasureで個々のPrimitiveの面積か体積を測ります。続いて、For Loopで各ピースごとが持っている各Primitive面積の総和を出します。これが、ピースのサイズとなります。
本題です。Wrangleでやってみます。
nuniqueval() uniqueval() findattribvalcount() findattribval() この関数がミソなんでHelpは読んでください。
string piece_attr = &amp;#34;name&amp;#34;; int num_piece_attr = nuniqueval(@OpInput1, &amp;#34;prim&amp;#34;, piece_attr); addattrib(0,&amp;#34;prim&amp;#34;,&amp;#34;area_sum&amp;#34;,0.0); for(int i = 0; i &amp;lt; num_piece_attr; i++){ string uq_val = uniqueval(@OpInput1, &amp;#34;prim&amp;#34;, piece_attr,i); int num_prim_piece = findattribvalcount(@OpInput1, &amp;#34;prim&amp;#34;, piece_attr,uq_val); int prim_piece,ii =0; float per_area,area_sum =0.0; for(ii=0; ii&amp;lt; num_prim_piece; ii++){ prim_piece = findattribval(@OpInput1,&amp;#34;prim&amp;#34;,piece_attr,uq_val,ii); per_area = prim(0,&amp;#34;area&amp;#34;,prim_piece); area_sum += per_area; } for(ii=0; ii&amp;lt; num_prim_piece; ii++){ prim_piece = findattribval(@OpInput1,&amp;#34;prim&amp;#34;,piece_attr,uq_val,ii); setattrib(0, &amp;#34;prim&amp;#34;, &amp;#34;area_sum&amp;#34;, prim_piece, 0, area_sum, &amp;#34;set&amp;#34;); } } For Loopでやった処理を分解しながら説明していきます。Run OverはDetailです。</description>
    </item>
    
    <item>
      <title>Wrangleを使おう 2.5</title>
      <link>https://ShoheiOkazaki.github.io/FXHACK/posts/2015-03-02/</link>
      <pubDate>Mon, 02 Mar 2015 02:53:32 +0900</pubDate>
      
      <guid>https://ShoheiOkazaki.github.io/FXHACK/posts/2015-03-02/</guid>
      <description>一個書き忘れてたことがあったので、さらっと。
数学定数、円周率(π)・自然対数の底(e)・黄金比(φ/τ)とか、時々使うけど漠然としか値を覚えていない奴らがいます。正確な値を知るために毎回、調べるのは億劫です。
例えば、Wrangleで初めに#include &amp;lt;math.h&amp;gt;と書けば、以降このノード内ではM_PIが3.1415926の値を持っていることになります。
#include &amp;lt;math.h&amp;gt; f@_check = M_PI; なにが起こっているかというと、$HH/vex/includeにmath.hというファイルがあります。そのファイルの中で、定義されたものを読み込んでいます。この他にもあるので中を見てみてください。
このファイルは自分で作ることもできます。例えば黄金比を呼び出したい場合。
#define PHI 1.61803 これを、HOUDINI_PATHに設定している場所のvex/includeに.h形式で保存するか、HOUDINI_VEX_PATHに登録しているところに保存すれば、これ以降、読み込むことができます。
#include &amp;lt;test.h&amp;gt; f@_check = PHI; 決められたところに保存しなくても、test.hのところを/home/user/test.hとパスを入れても呼び出すこともできます。</description>
    </item>
    
    <item>
      <title>Wrangleを使おう 2</title>
      <link>https://ShoheiOkazaki.github.io/FXHACK/posts/2015-03-01/</link>
      <pubDate>Sun, 01 Mar 2015 11:40:54 +0900</pubDate>
      
      <guid>https://ShoheiOkazaki.github.io/FXHACK/posts/2015-03-01/</guid>
      <description>Wrangleは、アトリビュートを作ったり編集するだけでなく、Pointを作ったりPrimitiveを作ったりもできます。初心者向けのチュートリアルで時々みるPointSopを使って、Pを編集してるやつをWrangleで置き換えてみます。こんなやつです。 まずラインの作り方 line sopできますが、wrangleでやってみます。ただの直線を作るときに、わざわざwrangleでやる必要はないかと思いますが、近くのpoint同士を結びつけるときなど普通にやろうとすると、めんどくさい時に重宝するので覚えときましょう。
int res = 10; float height = 5.0; int line = addprim(0, &amp;#34;polyline&amp;#34;); for(int i=0; i&amp;lt;res; i++){ vector pos =set(1, height/(res-1)*i, 0); int cp = addpoint(0,pos); addvertex(0, line, cp); } 長さ(height)とポイント数(res)を決めてあげて、これらのポイントを結んでラインを作ります。なぜ、Vertexを作る必要があるかというと、Primitiveを構成するにはVertexが必要です。Pointではありません。Help: ジオメトリの作成
もちろん、Vopでもつくれます。 ラインが作れたら、各Pointの位置を編集するだけです。簡単ですね。
int res = 100; float rad = 3; float height = 5; float freq = 10; int line = addprim(0, &amp;#34;polyline&amp;#34;); for (int i = 0; i &amp;lt; res; i++){ vector pos; pos.</description>
    </item>
    
    <item>
      <title>Wrangleを使おう 1</title>
      <link>https://ShoheiOkazaki.github.io/FXHACK/posts/2015-02-18/</link>
      <pubDate>Wed, 18 Feb 2015 13:59:47 +0900</pubDate>
      
      <guid>https://ShoheiOkazaki.github.io/FXHACK/posts/2015-02-18/</guid>
      <description>&lt;p&gt;12.5から搭載されたWrangleですが、結構避けてる人が多い印象です。&lt;/p&gt;
&lt;p&gt;せっかくノードベースでやってるのに、&lt;del&gt;イライラする&lt;/del&gt;MayaのExpressionを思い出させられて避けてるのかもしれません。&lt;/p&gt;
&lt;p&gt;しかしMayaから移行した人にとっては、Expressionと似ているので敷居は高くないはずです。エフェクト屋でPythonとかMelなどのScriptを、全く書けないという人はいないと思うんで、その知識も役立ちます。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
