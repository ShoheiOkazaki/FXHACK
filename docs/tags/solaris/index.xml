<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Solaris on FX HACK</title>
    <link>http://localhost:1313/FXHACK/tags/solaris/</link>
    <description>Recent content in Solaris on FX HACK</description>
    <image>
      <url>http://localhost:1313/FXHACK/profile.jpg</url>
      <link>http://localhost:1313/FXHACK/profile.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 05 Oct 2023 09:27:07 +0900</lastBuildDate><atom:link href="http://localhost:1313/FXHACK/tags/solaris/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Solaris] HDAカメラのインポート</title>
      <link>http://localhost:1313/FXHACK/posts/2023-10-05/</link>
      <pubDate>Thu, 05 Oct 2023 09:27:07 +0900</pubDate>
      
      <guid>http://localhost:1313/FXHACK/posts/2023-10-05/</guid>
      <description>問題 SolarisにSceneImportLOPでカメラをインポートする際、自前のHDAカメラをインポートしようとするとワーニングがでてインポートできません。
（自前のカメラとはこういうHDAです）
以下のようなワーニングが表示されます。これはおそらく19.5以降でしか表示されないかもしれません。 解決策 まずは言われた通り、リンクに飛びましょう。
以下のような記述が冒頭にありますね。カスタムノードをLOPに読み込むにはなにか作業が必要なようですね。
Scene Import LOPが特定のHoudiniオブジェクトノードタイプをUSDに変換する方法をカスタマイズすることができます。 これは、特にカスタムノードタイプ(例えば、プロプライエタリなレンダラー関係のライトタイプやカメラタイプ)の変換に役立ちます。
その後を読み続けると色々Pythonやら書いてありますね。でもちょっと長いので無視します。
Houdiniはカスタムできるものについては、インストールフォルダにだいたいのものがバイナリになっていない状態で保存されてるので、それをコピーしてから始めるのが最短の道です。ということで以下のファイルを見てみましょう。
インストールフォルダ/houdini/husdplugins/objtranslators/cam.py
import hou import husd from pxr import UsdGeom class CameraTranslator(husd.objtranslator.Translator): def shouldTranslateNode(self): return True def primType(self): return &amp;#39;Camera&amp;#39; def populatePrim(self, prim, referenced_node_prim_paths, force_active): super(CameraTranslator, self).populatePrim(prim, referenced_node_prim_paths, force_active) cam = UsdGeom.Camera(prim) proj = self._node.parm(&amp;#39;projection&amp;#39;).evalAsString() if proj == &amp;#39;perspective&amp;#39;: cam.CreateProjectionAttr(&amp;#39;perspective&amp;#39;) elif proj == &amp;#39;ortho&amp;#39;: cam.CreateProjectionAttr(&amp;#39;orthographic&amp;#39;) # A few of the parameters need to be converted into 1/10 scene unit space stage = prim.</description>
    </item>
    
  </channel>
</rss>
