<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vex on FX HACK</title>
    <link>http://localhost:1313/FXHACK/tags/vex/</link>
    <description>Recent content in Vex on FX HACK</description>
    <image>
      <url>http://localhost:1313/FXHACK/profile.jpg</url>
      <link>http://localhost:1313/FXHACK/profile.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 10 Dec 2016 10:00:44 +0900</lastBuildDate><atom:link href="http://localhost:1313/FXHACK/tags/vex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wrangleを使おう 3 - Replace ForLoop</title>
      <link>http://localhost:1313/FXHACK/posts/2016-12-10/</link>
      <pubDate>Sat, 10 Dec 2016 10:00:44 +0900</pubDate>
      
      <guid>http://localhost:1313/FXHACK/posts/2016-12-10/</guid>
      <description>久しぶりのWrangle回です。
個人的にHoudiniにおいて、よく使う必需ノードは、For LoopとAttribute Promoteです。これらがないと仕事ができません。もちろんWrangleも絶対使います。
特にFor LoopはHoudiniを象徴するようなノードだと勝手に思ってます。ある処理を考え、それを他のものにも同様な処理を施す。まさにProceduralに作業する上で必要不可欠なものです。
しかし！ForLoopは処理に時間がかる時が大半です。なぜなら、すべてのノードがマルチスレッド処理されるわけではありませんし、１つ１つのピースやグループを同時にではなく、順番に処理するため遅くなってしまいます 。
シンプルな例を元に解説していきます。
Sample File : wrangle_03.hiplc (15.5.607 linux-x86_64-gcc4.8)
Voronoiで割った1つ1つのピースのサイズを測ろうと思います。あまりにも小さいピースはSimulationに参加させない様にさせるとか、大きいやつはもう一回砕こうとかで使うことがありますね。
ピースのサイズを求めるために、まずMeasureで個々のPrimitiveの面積か体積を測ります。続いて、For Loopで各ピースごとが持っている各Primitive面積の総和を出します。これが、ピースのサイズとなります。
本題です。Wrangleでやってみます。
nuniqueval() uniqueval() findattribvalcount() findattribval() この関数がミソなんでHelpは読んでください。
string piece_attr = &amp;#34;name&amp;#34;; int num_piece_attr = nuniqueval(@OpInput1, &amp;#34;prim&amp;#34;, piece_attr); addattrib(0,&amp;#34;prim&amp;#34;,&amp;#34;area_sum&amp;#34;,0.0); for(int i = 0; i &amp;lt; num_piece_attr; i++){ string uq_val = uniqueval(@OpInput1, &amp;#34;prim&amp;#34;, piece_attr,i); int num_prim_piece = findattribvalcount(@OpInput1, &amp;#34;prim&amp;#34;, piece_attr,uq_val); int prim_piece,ii =0; float per_area,area_sum =0.0; for(ii=0; ii&amp;lt; num_prim_piece; ii++){ prim_piece = findattribval(@OpInput1,&amp;#34;prim&amp;#34;,piece_attr,uq_val,ii); per_area = prim(0,&amp;#34;area&amp;#34;,prim_piece); area_sum += per_area; } for(ii=0; ii&amp;lt; num_prim_piece; ii++){ prim_piece = findattribval(@OpInput1,&amp;#34;prim&amp;#34;,piece_attr,uq_val,ii); setattrib(0, &amp;#34;prim&amp;#34;, &amp;#34;area_sum&amp;#34;, prim_piece, 0, area_sum, &amp;#34;set&amp;#34;); } } For Loopでやった処理を分解しながら説明していきます。Run OverはDetailです。</description>
    </item>
    
  </channel>
</rss>
